<?php
/**
 * This file is part of CodeBeast.
 *
 * (c) Sebastian Feldmann <sf@sebastian.feldmann.info>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace EugeneZenko\CodeBeast\Runner;

use EugeneZenko\CodeBeast\Runner;
use EugeneZenko\CodeBeast\Console\IOUtil;

class Installer extends Runner
{
    /**
     * Execute installation.
     */
    public function run()
    {
        $file = $this->getHookSettings();

        if (empty($file)) {
            $path = $this->io->ask('  <info>Path to git hook settings</info> <comment>pre-commit.settings file generated by codebeast</comment> ', '');
            $path = trim($path);
            if (!empty($path)) {
                $file = file_exists($path);
            }
        }

        if (empty($file)) {
            $this->io->writeError('<info>Cannot locate hook file </info>');
            exit;
        }

        $directory = $this->detectGitFolder();

        if (empty($directory)) {
            $dir = $this->io->ask('  <info>Path to .git folder</info>', 'Skip trailing slash');
            $dir = trim($dir);
            if (!empty($dir)) {
                $directory = is_dir($dir);
            }
        }

        if (empty($directory)) {
            $this->io->writeError('<info>Cannot locate directory </info>');
            exit;
        }

        $dest = $directory . '/hooks/pre-commit';
        $result = copy($file, $dest);
        $writable = chmod($dest, 0755);
        if ($result && $writable) {
            $this->io->write('<info>Hook installed</info>');
        } else {
            $this->io->writeError('<info>Cannot install hook </info>');
        }
    }

    protected function getHookSettings() {
        $initial_cwd = preg_replace( '~(\w)$~' , '$1' . DIRECTORY_SEPARATOR , realpath( getcwd() ) );
        $guess_file = $initial_cwd . 'pre-commit.settings';

        if (file_exists($guess_file)) {
            $use = $this->io->ask('  <info>Do you want to use autodetected file?</info> <comment>' . $guess_file . ' [ y, n ]</comment> ', '');
            if (IOUtil::answerToBool($use)) {
                return $guess_file;
            }
        }

        return '';
    }

    protected function detectGitFolder() {
        $initial_cwd = preg_replace( '~(\w)$~' , '$1' . DIRECTORY_SEPARATOR , realpath( getcwd() ) );
        $guess_dir = $initial_cwd . '.git';
        if (file_exists($guess_dir)) {
            $use = $this->io->ask('  <info>Do you want to use autodetected .git dir?</info> <comment>' . $guess_dir . ' [ y, n ]</comment> ', '');
            if (IOUtil::answerToBool($use)) {
                return $guess_dir;
            }
        }

        return '';
    }
}
